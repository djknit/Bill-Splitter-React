{"version":3,"sources":["components/navbar/style.js","components/navbar/nav-link/index.js","components/navbar/index.js","components/home-view/index.js","components/enter-bills-view/index.js","App.js","serviceWorker.js","index.js"],"names":["nav","padding","borderBottom","boxShadow","brand","fontFamily","fontSize","dollarSign","color","position","top","Navlink","props","this","path","text","onClick","history","console","log","to","className","window","location","pathname","Component","withRouter","navbar","role","aria-label","style","homeView","enterBillsView","App","exact","render","component","EnterBillsView","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAAgB,G,MAAA,CACdA,IAAK,CACHC,QAAS,SACTC,aAAc,kBACdC,UAAW,yBAEbC,MAAO,CACLC,WAAY,8CACZC,SAAU,IAEZC,WAAY,CACVC,MAAO,UACPF,SAAU,GACVG,SAAU,WACVC,IAAK,K,wCCVHC,G,kBACJ,WAAYC,GAAQ,qEACZA,I,sEAIE,IAAD,EAMHC,KAAKD,MAJPE,EAFK,EAELA,KACAC,EAHK,EAGLA,KACAC,EAJK,EAILA,QACAC,EALK,EAKLA,QAIF,OADAC,QAAQC,IAAIF,GAEVH,EACE,kBAAC,IAAD,CACEM,GAAIN,EACJO,UAAWC,OAAOC,SAASC,WAAaV,EAAO,wBAA0B,eAExEC,GAGH,0BACEC,QAASA,GAERD,O,GA3BWU,cAiCtBC,YAAWf,GAEIA,QCbAgB,MAtBf,YAEI,IADFV,EACC,EADDA,QAGA,OADAC,QAAQC,IAAIF,GAEV,yBAAKI,UAAU,SAASO,KAAK,aAAaC,aAAW,kBAAkBC,MAAOA,EAAM9B,KAClF,yBAAKqB,UAAU,gBACb,yBAAKA,UAAU,cAAcS,MAAOA,EAAM1B,OACxC,0BAAMiB,UAAU,SACd,0BAAMA,UAAU,cAAcS,MAAOA,EAAMvB,YAA3C,KADF,qCAGE,0BAAMc,UAAU,cAAcS,MAAOA,EAAMvB,YAA3C,OAGJ,yBAAKc,UAAU,eAAf,UACA,kBAAC,EAAD,CAASP,KAAK,IAAIC,KAAK,SACvB,kBAAC,EAAD,CAASD,KAAK,eAAeC,KAAK,mBCX3BgB,MAPf,YAEI,IADFd,EACC,EADDA,QAGA,OADAC,QAAQC,IAAIF,GACJ,6CCAKe,MAJf,WACE,OAAQ,oDC2BKC,MAtBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLpB,KAAK,IACLqB,OAAQ,SAAAvB,GAAK,OAAI,kBAAC,EACZA,MAGR,kBAAC,IAAD,CACEsB,OAAK,EACLpB,KAAK,eACLsB,UAAWC,OCXDC,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.80944626.chunk.js","sourcesContent":["export default ({\r\n  nav: {\r\n    padding: '0 20px',\r\n    borderBottom: 'solid 1px black',\r\n    boxShadow: '0 1px 3px 1px #555555'\r\n  },\r\n  brand: {\r\n    fontFamily: 'Just Another Hand, Brush Script MT, cursive',\r\n    fontSize: 24\r\n  },\r\n  dollarSign: {\r\n    color: '#216C2A', // \"Money Green\" - source: https://www.colourlovers.com/color/216C2A/money_green\r\n    fontSize: 36,\r\n    position: 'relative',\r\n    top: 4\r\n  }\r\n});","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport './style.css';\n\nclass Navlink extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  render() {\n    const {\n      path,\n      text,\n      onClick,\n      history\n    } = this.props;\n\n    console.log(history);\n    return (\n      path ?\n        <Link\n          to={path}\n          className={window.location.pathname === path ? \"navbar-item is-active\" : \"navbar-item\"}\n        >\n          {text}\n        </Link>\n        :\n        <span\n          onClick={onClick}\n        >\n          {text}\n        </span>\n    );\n  }\n}\n\nwithRouter(Navlink);\n\nexport default Navlink","import React, { Component } from 'react';\r\nimport style from './style';\r\nimport NavLink from './nav-link';\r\n\r\nfunction navbar({\r\n  history\r\n}) {\r\n  console.log(history)\r\n  return (\r\n    <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\" style={style.nav}>\r\n      <div className=\"navbar-brand\">\r\n        <div className=\"navbar-item\" style={style.brand}>\r\n          <span className=\"brand\">\r\n            <span className=\"dollar-sign\" style={style.dollarSign}>$</span>\r\n            &nbsp;Dave's Delux Bill Splitter&nbsp;\r\n            <span className=\"dollar-sign\" style={style.dollarSign}>$</span>\r\n          </span>\r\n        </div>\r\n        <div className=\"navbar-item\">&mdash;</div>\r\n        <NavLink path=\"/\" text=\"Home\" />\r\n        <NavLink path=\"/enter-bills\" text=\"Enter Bills\" />\r\n      </div>\r\n    </nav>\r\n  );  \r\n}\r\n\r\nexport default navbar;","import React from 'react';\r\n\r\nfunction homeView({\r\n  history\r\n}) {\r\n  console.log(history)\r\n  return (<>home</>);\r\n}\r\n\r\nexport default homeView;","import React from 'react';\r\n\r\nfunction enterBillsView() {\r\n  return (<>enter bills</>);\r\n}\r\n\r\nexport default enterBillsView;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'bulma/css/bulma.css';\nimport Navbar from './components/navbar';\nimport HomeView from './components/home-view';\nimport EnterBillsView from './components/enter-bills-view';\n\nfunction App() {\n  return (\n    <Router >\n      <Navbar />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={props => <HomeView\n            {...props}\n          />}\n        />\n        <Route\n          exact\n          path=\"/enter-bills\"\n          component={EnterBillsView}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}